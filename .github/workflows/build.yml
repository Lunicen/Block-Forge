name: Build

on:
  pull_request:
    branches: [develop]

jobs:
  setup:
    name: Windows setup
    runs-on: windows-latest
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v3

      - name: Cache dependencies
        id: cache-dep
        uses: actions/cache@v3
        with:
          path: lib
          key: winBuildCacheFix2

      - name: Install msbuild
        if: steps.cache-dep.outputs.cache-hit != 'true'
        uses: microsoft/setup-msbuild@v1.1

      - name: Install cmake
        if: steps.cache-dep.outputs.cache-hit != 'true'
        uses: jwlawson/actions-setup-cmake@v1.12

      - name: Setup dependencies
        if: steps.cache-dep.outputs.cache-hit != 'true'
        run: setup.bat
        shell: cmd

      - name: Save setup
        uses: actions/upload-artifact@v3
        with:
          name: win-setup
          path: |
            include
            lib
            src
            CMakeLists.txt
            data
            Settings.json

  build:
    name: Build and test
    needs: setup
    runs-on: windows-latest
    strategy:
      matrix:
        platform: [x86, x64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Retrieve setup
        uses: actions/download-artifact@v3
        with:
          name: win-setup

      - name: Build and test the project
        run: |
          cmake -S . -B build -A ${{ matrix.platform }}
          cmake --build build --config Release --parallel 4
          copy data\Release build\Release
          copy Settings.json build\Release
          pushd build\Release
          start /B BlockForge.exe
          timeout /T 5
          tasklist /FI "IMAGENAME eq BlockForge.exe" 2>NUL | find /I /N "BlockForge.exe" >NUL
          if "%ERRORLEVEL%"=="0" (
            echo "Program is still running, success!"
            exit 0
          ) else (
            echo "Program fails to start!"
            exit 1
          )
