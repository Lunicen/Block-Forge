#pragma once
#include <glm/vec2.hpp>

#include "Noise.h"

class Noise2D final : protected Noise
{
	static std::vector<std::vector<float>> ConvertNoiseFrom1DTo2D(const std::vector<float>& noise, int size);
	
public:

	/// @brief The constructor.
	///	@param encodedTree - A string with encoded tree generated by using FastNoise2 tool.
	///	@param seed - noise seed for different results.
	///	@param frequency - The frequency of the encoded noise function.
	Noise2D(const std::string& encodedTree, const int seed, const float frequency)
		: Noise(encodedTree, seed, frequency)
	{
	}

	/// @brief Get noise that is at certain position on the map.
	/// @param origin - origin of the chunk.
	/// @param size - the size of the chunk (in one dimension).
	std::vector<std::vector<float>> GetNoise(glm::ivec2 origin, int size) const;

	/// @brief Get noise that is at certain point on the map.
	/// @param origin - origin of the chunk.
	/// @param xOffset - offset from origin the X axis. 
	///	@param yOffset - offset from origin the Y axis. 
	/// @param size - the size of the chunk (in one dimension).
	float GetNoiseAt(glm::ivec2 origin, int size, int xOffset, int yOffset) const;
};

