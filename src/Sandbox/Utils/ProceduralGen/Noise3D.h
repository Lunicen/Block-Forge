#pragma once
#include <glm/vec3.hpp>

#include "Noise.h"

class Noise3D final : protected Noise
{
	static std::vector<std::vector<std::vector<float>>> ConvertNoiseFrom1DTo3D(const std::vector<float>& noise, int size);

public:

	/// @brief The constructor.
	///	@param encodedTree - A string with encoded tree generated by using FastNoise2 tool.
	///	@param seed - noise seed for different results.
	///	@param frequency - The frequency of the encoded noise function.
	Noise3D(const std::string& encodedTree, const int seed, const float frequency)
		: Noise(encodedTree, seed, frequency)
	{
	}

	std::vector<float> GetColumnNoise(glm::ivec3 origin, int size, int xOffset, int yOffset, int zOffset) const;

	/// @brief Get noise that is at certain position on the map.
	/// @param origin - origin of the chunk.
	/// @param size - the size of the chunk (in one dimension).
	std::vector<std::vector<std::vector<float>>> GetNoise(glm::ivec3 origin, int size) const;

	/// @brief Get chunk noise that is at certain position on the map, including the noise around it.
	/// @param origin - origin of the chunk.
	/// @param size - the size of the chunk (in one dimension).
	std::vector<std::vector<std::vector<float>>> GetNoiseWithBorders(glm::ivec3 origin, int size) const;
};

